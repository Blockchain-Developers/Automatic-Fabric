{"version":3,"sources":["Component/ErrorMsgs.jsx","redux/actions.js","redux/action-types.js","Container/OrgCount.jsx","Container/OrgInfo.jsx","Container/PeerInfo.jsx","Container/CaInfo.jsx","Container/Submit.jsx","Component/OrgCard.jsx","Container/OrgList.jsx","App.jsx","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["WarnMsg","props","Alert","color","message","ErrorMsg","set_bar_val","payload","type","validate","Yup","orgcount","integer","positive","required","connect","state","dispatch","step1","update_org_num","val","history","useHistory","formik","useFormik","initialValues","validationSchema","onSubmit","values","push","useEffect","ListGroup","Form","handleSubmit","ListGroupItem","FormGroup","Label","for","Input","name","getFieldProps","touched","errors","Button","outline","block","size","tag","org","of","peercount","orderer","port","OrgInputField","orgOrder","Row","Col","step2","update_org_info","info","replace","i","orgList","key","Container","fluid","peer","step3","update_peer_info","fill_org","orgid","length","useParams","curorg","j","value","InputFields","allinputvalid","disabled","ca","CaInputField","caOrder","cacount","update_ca_info","caList","step4","displayinfo","useState","postingdata","setposting","JSON","stringify","onClick","fetch","body","headers","method","redirect","then","response","json","responseJson","window","location","href","path","Spinner","filled","filled_org","Card","style","margin","CardBody","CardTitle","CardText","Cards","cardlist","sm","lg","OrgCard","currentState","alldone","barVal","barvalue","Progress","padding","offset","md","textAlign","to","textDecoration","exact","component","OrgInput","PeerInput","CaInput","Submit","Orglist","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","rootReducer","action","Array","parseInt","fill","neworgs","parse","map","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f153d32e.chunk.js","sourcesContent":["import React from 'react';\nimport {Alert} from 'reactstrap';\n\nconst ErrorMsg = props =>{\n    return <Alert color=\"danger\">{props.message}</Alert>;\n}\nconst WarnMsg = props =>{\n    return <Alert color=\"warning\">{props.message}</Alert>\n}\nexport {WarnMsg};\nexport default ErrorMsg;","import {\n    UPDATE_ORG_NUM,\n    UPDATE_PEER_INFO,\n    UPDATE_ORG_INFO,\n    UPDATE_CA_INFO,\n    SET_BAR_VAL,\n    FILL_ORG,\n} from \"./action-types\";\nexport function update_org_num(payload) {\n    return { type: UPDATE_ORG_NUM, payload };\n}\nexport function update_org_info(payload) {\n    return { type: UPDATE_ORG_INFO, payload };\n}\nexport function set_bar_val(payload) {\n    return { type: SET_BAR_VAL, payload };\n}\nexport function update_peer_info(payload) {\n    return { type: UPDATE_PEER_INFO, payload };\n}\nexport function update_ca_info(payload) {\n    return { type: UPDATE_CA_INFO, payload };\n}\nexport function fill_org(payload) {\n    return { type: FILL_ORG, payload };\n}\n","export const UPDATE_ORG_NUM = \"UPDATE_ORG_NUM\";\nexport const UPDATE_ORG_INFO = \"UPDATE_ORG_INFO\";\nexport const UPDATE_PEER_INFO = \"UPDATE_PEER_INFO\";\nexport const UPDATE_CA_INFO = \"UPDATE_CA_INFO\b\b\";\nexport const SET_BAR_VAL = \"SET_BAR_VAL\";\nexport const FILL_ORG = \"FILL_ORG\";","import React, {  useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    ListGroup,\n    ListGroupItem,\n    Button\n} from \"reactstrap\";\nimport ErrorMsg from \"../Component/ErrorMsgs\";\nimport { useHistory } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport { update_org_num, set_bar_val } from \"../redux/actions\";\nimport * as Yup from \"yup\";\n\nconst validate = Yup.object({\n    orgcount: Yup.number()\n        .integer(\"must be a positive integer\")\n        .positive(\"must be a positive integer\")\n        .required(\"Required\")\n});\nconst mapStateToProps = state => ({ orgcount: state.orgcount });\nconst mapDispatchToProps = dispatch => ({\n    step1: () => {\n        dispatch(set_bar_val(0));\n    },\n    update_org_num: val => {\n        dispatch(update_org_num(val));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(props => {\n    const history = useHistory();\n    const formik = useFormik({\n        initialValues: {\n            orgcount: props.orgcount\n        },\n        validationSchema: validate,\n        onSubmit: values => {\n            props.update_org_num(values.orgcount);\n            history.push(\"/orgconfig\");\n        }\n    });\n    useEffect(() => {\n        props.step1();\n    });\n    return (\n        <ListGroup>\n            <Form onSubmit={formik.handleSubmit}>\n                <ListGroupItem>\n                    <legend>Input Number of orgs</legend>\n                </ListGroupItem>\n                <ListGroupItem>\n                    <FormGroup>\n                        <Label for=\"orgcount\">Number of orgs</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"orgcount\"\n                            {...formik.getFieldProps(\"orgcount\")}\n                        ></Input>\n                    </FormGroup>\n                    {formik.touched.orgcount && formik.errors.orgcount && (\n                        <ErrorMsg message={formik.errors.orgcount} />\n                    )}\n                </ListGroupItem>\n                <ListGroupItem>\n                    <Button\n                        outline\n                        block\n                        size=\"lg\"\n                        color=\"primary\"\n                        tag=\"button\"\n                        type=\"submit\"\n                    >\n                        Next\n                    </Button>\n                </ListGroupItem>\n            </Form>\n        </ListGroup>\n    );\n});\n","import React, {  useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    ListGroup,\n    ListGroupItem,\n    Container,\n    Row,\n    Col,\n    Button\n} from \"reactstrap\";\nimport { useHistory } from \"react-router\";\nimport { useFormik } from \"formik\";\nimport ErrorMsg from \"../Component/ErrorMsgs\";\nimport { set_bar_val, update_org_info } from \"../redux/actions\";\nimport * as Yup from \"yup\";\n\nconst validate = Yup.object({\n    org: Yup.array()\n        .of(\n            Yup.object({\n                name: Yup.string().required(\"Required\"),\n                peercount: Yup.number()\n                    .positive(\"must be a positive integer\")\n                    .integer(\"must be a positive integer\")\n                    .required(\"Required\"),\n                orderer: Yup.object({\n                    port: Yup.number()\n                        .positive(\"must be a positive integer\")\n                        .integer(\"must be a positive integer\")\n                        .required(\"Required\")\n                })\n            })\n        )\n        .required(\"Required\")\n});\n\nconst OrgInputField = props => {\n    let orgOrder = props.orgOrder;\n    const formik = props.formik;\n    return (\n        <ListGroupItem>\n            <FormGroup>\n                <Row>\n                    <Col>\n                        <Label for={`org[${orgOrder}].name`}>\n                            Org{orgOrder} Name\n                        </Label>\n                        <Input\n                            type=\"text\"\n                            name={`org[${orgOrder}].name`}\n                            {...formik.getFieldProps(`org[${orgOrder}].name`)}\n                        />\n                        {formik.touched.org &&\n                            formik.touched.org[orgOrder] &&\n                            formik.touched.org[orgOrder].name &&\n                            formik.errors.org &&\n                            formik.errors.org[orgOrder] &&\n                            formik.errors.org[orgOrder].name && (\n                                <ErrorMsg\n                                    message={formik.errors.org[orgOrder].name}\n                                />\n                            )}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Label for={`org[${orgOrder}].peercount`}>\n                            Number of Peers of Org{orgOrder}\n                        </Label>\n                        <Input\n                            type=\"text\"\n                            name={`org[${orgOrder}].peercount`}\n                            {...formik.getFieldProps(\n                                `org[${orgOrder}].peercount`\n                            )}\n                        />\n                        {formik.touched.org &&\n                            formik.touched.org[orgOrder] &&\n                            formik.touched.org[orgOrder].peercount &&\n                            formik.errors.org &&\n                            formik.errors.org[orgOrder] &&\n                            formik.errors.org[orgOrder].peercount && (\n                                <ErrorMsg\n                                    message={\n                                        formik.errors.org[orgOrder].peercount\n                                    }\n                                />\n                            )}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Label for={`org[${orgOrder}].orderer.port`}>\n                            Orderer Port of Org{orgOrder}\n                        </Label>\n                        <Input\n                            type=\"text\"\n                            name={`org[${orgOrder}].orderer.port`}\n                            {...formik.getFieldProps(\n                                `org[${orgOrder}].orderer.port`\n                            )}\n                        />\n                        {formik.touched.org &&\n                            formik.touched.org[orgOrder] &&\n                            formik.touched.org[orgOrder].orderer &&\n                            formik.errors.org &&\n                            formik.errors.org[orgOrder] &&\n                            formik.errors.org[orgOrder].orderer && (\n                                <ErrorMsg\n                                    message={\n                                        formik.errors.org[orgOrder].orderer.port\n                                    }\n                                />\n                            )}\n                    </Col>\n                </Row>\n            </FormGroup>\n        </ListGroupItem>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    step2: () => {\n        dispatch(set_bar_val(25));\n    },\n    update_org_info: info => {\n        dispatch(update_org_info(info));\n    }\n});\nconst mapStateToProps = state => ({\n    orgcount: state.orgcount,\n    org: state.org\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(props => {\n    const history = useHistory();\n    //make sure that user input orgnum already\n    if (props.orgcount === 0) {\n        history.replace(\"/\");\n        return <div>redirecting...</div>;\n    }\n\n    const initialValues = {\n        org: []\n    };\n    if (!props.org) {\n        for (let i = 0; i < props.orgcount; i++) {\n            initialValues.org.push({\n                name: \"\",\n                peercount: \"\",\n                orderer: {\n                    port: \"\"\n                }\n            });\n        }\n    } else {\n        initialValues.org = props.org;\n    }\n    const formik = useFormik({\n        initialValues,\n        validationSchema: validate,\n        onSubmit: info => {\n            //console.log(props.org);\n            //console.log(info);\n            props.update_org_info(info.org);\n            history.push(\"/orglist\");\n        }\n    });\n    useEffect(() => {\n        props.step2();\n    });\n    let orgList = [];\n    for (let i = 0; i < props.orgcount; i++) {\n        orgList.push(<OrgInputField key={i} orgOrder={i} formik={formik} />);\n    }\n\n    //ref.current[i].value to get value\n    return (\n        <Container fluid>\n            <Form onSubmit={formik.handleSubmit}>\n                <ListGroup>\n                    <Row>\n                        <Col>\n                            <ListGroup>\n                                <ListGroupItem>\n                                    <legend>Input Org config</legend>\n                                </ListGroupItem>\n                                {orgList}\n                            </ListGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <ListGroupItem>\n                                <Button\n                                    outline\n                                    block\n                                    size=\"lg\"\n                                    color=\"primary\"\n                                    tag=\"button\"\n                                    type=\"submit\"\n                                >\n                                    Next\n                                </Button>\n                            </ListGroupItem>\n                        </Col>\n                    </Row>\n                </ListGroup>\n            </Form>\n        </Container>\n    );\n});\n","import React, { useEffect} from \"react\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { set_bar_val, update_peer_info, fill_org } from \"../redux/actions\";\nimport { useHistory, useParams } from \"react-router\";\nimport { WarnMsg } from \"../Component/ErrorMsgs\";\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Container,\n    Row,\n    Col,\n    ListGroup,\n    ListGroupItem,\n} from \"reactstrap\";\nconst validate = Yup.object({\n    peer: Yup.array()\n        .of(\n            Yup.object({\n                name: Yup.string().required(\"Required\"),\n                port: Yup.number()\n                    .positive()\n                    .integer()\n                    .required(\"please input a positive integer\"),\n            })\n        )\n        .required(\"Required\"),\n});\nconst mapDispatchToProps = (dispatch) => ({\n    step3: () => dispatch(set_bar_val(50)),\n    update_peer_info: (info) => dispatch(update_peer_info(info)),\n    fill_org: (orgid) => dispatch(fill_org(orgid)),\n});\nconst mapStateToProps = (state) => ({\n    org: state.org,\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)((props) => {\n    const history = useHistory();\n    //make sure user input orgconfig already\n    if (!props.org || props.org.length === 0) {\n        history.replace(\"/\");\n        return <div>redirecting...</div>;\n    }\n    useEffect(() => {\n        props.step3();\n    });\n    const initialValues = {\n        peer: [],\n    };\n    const { orgid } = useParams();\n    const curorg = orgid;\n    //already input value, recover previous, otherwise empty string\n    for (let j = 0; j < props.org[orgid].peercount; j++) {\n        initialValues.peer.push({\n            name:\n                props.org[orgid].peer && props.org[orgid].peer[j]\n                    ? props.org[orgid].peer[j].name\n                    : \"\",\n            port:\n                props.org[orgid].peer && props.org[orgid].peer[j]\n                    ? props.org[orgid].peer[j].port\n                    : \"\",\n        });\n    }\n\n    const formik = useFormik({\n        initialValues,\n        validationSchema: validate,\n        onSubmit: (value) => {\n            props.update_peer_info({ peer: value.peer, orgid });\n            props.fill_org(orgid);\n            history.push(\"/orglist\");\n        },\n    });\n    let InputFields = [];\n    for (let i = 0; i < props.org[curorg].peercount; i++) {\n        InputFields.push(\n            <ListGroupItem key={i}>\n                <FormGroup>\n                    <Label for={`peer[${i}].name`}>name for peer{i}</Label>\n                    <Input\n                        type=\"text\"\n                        name={`peer[${i}].name`}\n                        {...formik.getFieldProps(`peer[${i}].name`)}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label for={`peer[${i}].port`}>port of peer{i}</Label>\n                    <Input\n                        type=\"text\"\n                        name={`peer[${i}].port`}\n                        {...formik.getFieldProps(`peer[${i}].port`)}\n                    />\n                </FormGroup>\n            </ListGroupItem>\n        );\n    }\n    // check input of every org is valid(not empty and not garbage)\n    let allinputvalid = true;\n    for (let j = 0; j < props.org[orgid].peercount; j++) {\n        if (\n            (!formik.touched.peer ||\n            !formik.touched.peer[j] ||\n            formik.errors.peer) && !props.org[orgid].peer\n        ) {\n            allinputvalid = false;\n            break;\n        }\n    }\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <Form onSubmit={formik.handleSubmit}>\n                        <ListGroup>\n                            <ListGroupItem>\n                                <legend>\n                                    {`Input config for ${props.org[curorg].name}`}\n                                </legend>\n                            </ListGroupItem>\n                            {InputFields}\n                            <ListGroupItem>\n                                <Button\n                                    disabled={!allinputvalid}\n                                    outline\n                                    block\n                                    size=\"lg\"\n                                    color={\n                                        allinputvalid ? \"primary\" : \"secondary\"\n                                    }\n                                    tag=\"button\"\n                                    type=\"submit\"\n                                >\n                                    Next\n                                </Button>\n                                {!allinputvalid && formik.touched.peer && (\n                                    <WarnMsg\n                                        message={\n                                            \"some inputs are invalid or empty\"\n                                        }\n                                    />\n                                )}\n                            </ListGroupItem>\n                        </ListGroup>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n});\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    ListGroup,\n    ListGroupItem,\n    Container,\n    Row,\n    Col,\n    Button\n} from \"reactstrap\";\nimport { useHistory } from \"react-router\";\nimport { useFormik } from \"formik\";\nimport ErrorMsg from \"../Component/ErrorMsgs\";\nimport { set_bar_val, update_ca_info } from \"../redux/actions\";\nimport * as Yup from \"yup\";\n\nconst validate = Yup.object({\n    ca: Yup.array()\n        .of(\n            Yup.object({\n                name: Yup.string().required(\"Required\"),\n                port: Yup.number()\n                    .positive(\"must be a positive integer\")\n                    .integer(\"must be a positive integer\")\n                    .required(\"Required\")\n            })\n        )\n        .required(\"Required\")\n});\n\nconst CaInputField = props => {\n    let caOrder = props.caOrder;\n    const formik = props.formik;\n    return (\n        <ListGroupItem>\n            <FormGroup>\n                <Row>\n                    <Col>\n                        <Label for={`ca[${caOrder}].name`}>\n                            ca{caOrder} Name\n                        </Label>\n                        <Input\n                            type=\"text\"\n                            name={`ca[${caOrder}].name`}\n                            {...formik.getFieldProps(`ca[${caOrder}].name`)}\n                        />\n                        {formik.touched.ca &&\n                            formik.touched.ca[caOrder] &&\n                            formik.touched.ca[caOrder].name &&\n                            formik.errors.ca &&\n                            formik.errors.ca[caOrder] &&\n                            formik.errors.ca[caOrder].name && (\n                                <ErrorMsg\n                                    message={formik.errors.ca[caOrder].name}\n                                />\n                            )}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Label for={`ca[${caOrder}].port`}>\n                            Port of ca{caOrder}\n                        </Label>\n                        <Input\n                            type=\"text\"\n                            name={`ca[${caOrder}].port`}\n                            {...formik.getFieldProps(\n                                `ca[${caOrder}].port`\n                            )}\n                        />\n                        {formik.touched.ca &&\n                            formik.touched.ca[caOrder] &&\n                            formik.touched.ca[caOrder].port &&\n                            formik.errors.ca &&\n                            formik.errors.ca[caOrder] &&\n                            formik.errors.ca[caOrder].port && (\n                                <ErrorMsg\n                                    message={\n                                        formik.errors.ca[caOrder].port\n                                    }\n                                />\n                            )}\n                    </Col>\n                </Row>\n            </FormGroup>\n        </ListGroupItem>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    step3: () => {\n        dispatch(set_bar_val(75));\n    },\n    update_ca_info: (info)=>{\n        dispatch(update_ca_info(info))\n    }\n});\nconst mapStateToProps = state => ({\n    cacount: state.cacount,\n    ca: state.ca\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(props => {\n    const history = useHistory();\n    //make sure that user input canum already\n    if (props.cacount === 0) {\n        history.replace(\"/\");\n        return <div>redirecting...</div>;\n    }\n\n    const initialValues = {\n        ca: []\n    };\n    if (!props.ca) {\n        for (let i = 0; i < props.cacount; i++) {\n            initialValues.ca.push({\n                name: \"\",\n                port: \"\"\n            });\n        }\n    } else {\n        initialValues.ca = props.ca;\n    }\n    const formik = useFormik({\n        initialValues,\n        validationSchema: validate,\n        onSubmit: info => {\n            //console.log(props.ca);\n            //console.log(info);\n            props.update_ca_info(info.ca);\n            history.push(\"/submit\");\n        }\n    });\n    useEffect(() => {\n        props.step3();\n    });\n    let caList = [];\n    for (let i = 0; i < props.cacount; i++) {\n        caList.push(<CaInputField key={i} caOrder={i} formik={formik} />);\n    }\n    return (\n        <Container fluid>\n            <Form onSubmit={formik.handleSubmit}>\n                <ListGroup>\n                    <Row>\n                        <Col>\n                            <ListGroup>\n                                <ListGroupItem>\n                                    <legend>Enter Ca configs</legend>\n                                </ListGroupItem>\n                                {caList}\n                            </ListGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <ListGroupItem>\n                                <Button\n                                    outline\n                                    block\n                                    size=\"lg\"\n                                    color=\"primary\"\n                                    tag=\"button\"\n                                    type=\"submit\"\n                                >\n                                    Next\n                                </Button>\n                            </ListGroupItem>\n                        </Col>\n                    </Row>\n                </ListGroup>\n            </Form>\n        </Container>\n    );\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { set_bar_val } from \"../redux/actions\";\nimport { useHistory } from \"react-router\";\nimport { useEffect } from \"react\";\nimport {\n    ListGroup,\n    ListGroupItem,\n    Container,\n    Form,\n    Button,\n    Spinner,\n} from \"reactstrap\";\nimport { useState } from \"react\";\n//import {useFormik} from 'formik';\nconst mapDispatchToProps = (dispatch) => ({\n    step4: () => {\n        dispatch(set_bar_val(100));\n    },\n});\nconst mapStateToProps = (state) => ({\n    org: state.org,\n    ca: state.ca,\n    cacount: state.cacount,\n    orgcount: state.orgcount,\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)((props) => {\n    const history = useHistory();\n    if (props.org.length === 0 || props.ca.length === 0) {\n        history.replace(\"/\");\n        return <div>redirecting...</div>;\n    }\n    //const formik = useFormik();\n    let displayinfo = {\n        org: props.org,\n        ca: props.ca,\n        cacount: props.cacount,\n        orgcount: props.orgcount,\n    };\n    let [postingdata, setposting] = useState(false);\n    useEffect(() => {\n        props.step4();\n    });\n    return (\n        <Container>\n            <Form>\n                <ListGroup>\n                    <ListGroupItem>\n                        <legend>This is your input data</legend>\n                    </ListGroupItem>\n                    <ListGroupItem>\n                        <pre>{JSON.stringify(displayinfo, null, 2)}</pre>\n                    </ListGroupItem>\n                    <ListGroupItem>\n                        <Button\n                            outline\n                            block\n                            size=\"lg\"\n                            color=\"primary\"\n                            onClick={() => {\n                                setposting(true);\n                                fetch(\"/getconfig\", {\n                                    body: JSON.stringify(displayinfo),\n                                    headers: {\n                                        \"content-type\": \"application/json\",\n                                    },\n                                    method: \"POST\",\n                                    redirect: \"follow\",\n                                })\n                                    .then((response) => {\n                                        setposting(false);\n                                        return response.json();\n                                    })\n                                    .then((responseJson) => {\n                                        window.location.href =\n                                            responseJson.path;\n                                    });\n                            }}\n                        >\n                            {postingdata ? (\n                                <Spinner color=\"primary\" />\n                            ) : (\n                                \"Are you sure you want to submit ?\"\n                            )}\n                        </Button>\n                    </ListGroupItem>\n                </ListGroup>\n            </Form>\n        </Container>\n    );\n});\n","import React from \"react\";\nimport { Card, CardBody, CardTitle, CardText, Button } from \"reactstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nconst mapStateToProps = (state) => ({\n    filled: (orgid) => state.filled_org[orgid],\n});\nexport default connect(\n    mapStateToProps,\n    null\n)((props) => {\n    let history = useHistory();\n    return (\n        <Card style={{ margin: \"1em\" }}>\n            <CardBody\n                tag={Button}\n                outline\n                color={props.filled(props.orgid) ? \"info\" : \"danger\"}\n                onClick={() => {\n                    history.push(`/peerconfig/${props.orgid}`);\n                }}\n            >\n                <CardTitle>\n                    <h1>{props.org.name}</h1>\n                </CardTitle>\n                <CardText>       \n                        peers:<br/>\n                        {props.org.peercount}                  \n                </CardText>\n                <CardText>\n                        orderer port:<br/>\n                        {props.org.orderer.port}\n                </CardText>\n            </CardBody>\n        </Card>\n    );\n});\n","import React from \"react\";\nimport { Col, Row, Container, Button } from \"reactstrap\";\nimport OrgCard from \"../Component/OrgCard\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nconst Cards = (props) => {\n    let orgcount = props.orgcount;\n    let cardlist = [];\n    for (let i = 0; i < orgcount; i++) {\n        cardlist.push(\n            <Col sm=\"12\" lg=\"6\" key={i}>\n                <OrgCard\n                    org={props.org[i]}\n                    orgid={i}\n                />\n            </Col>\n        );\n    }\n    return cardlist;\n};\nconst mapStateToProps = (state) => ({\n    orgcount: state.orgcount,\n    org: state.org,\n    currentState: state.filled_org\n});\nexport default connect(\n    mapStateToProps,\n    null\n)((props) => {\n    const history = useHistory();\n    if (!props.org || props.orgcount === 0) {\n        history.replace(\"/orgconfig\");\n        return <div>redirecting...</div>;\n    }\n    const currentState = props.currentState;\n    let alldone = true;\n    for (let i = 0;i< props.orgcount;i++) {\n        if (currentState[i] === false) {\n            alldone = false;\n            break;\n        }\n    }\n    return (\n        <Container>\n            <Row>\n                <Cards\n                    orgcount={props.orgcount}\n                    org={props.org}\n                />\n            </Row>\n            <Row>\n                <Col>\n                    <Button\n                        block\n                        size=\"lg\"\n                        color={alldone ? \"primary\" : \"secondary\"}\n                        outline\n                        disabled={!alldone}\n                        onClick={()=>{\n                            history.push(\"/caconfig\")\n                        }}\n                    >\n                        Next\n                    </Button>\n                </Col>\n            </Row>\n        </Container>\n    );\n});\n","import React from \"react\";\nimport \"./App.css\";\nimport { Container, Col, Row, Progress } from \"reactstrap\";\nimport Form from \"./Container/OrgCount\";\nimport { Route, BrowserRouter, Switch, NavLink } from \"react-router-dom\";\nimport OrgInput from \"./Container/OrgInfo\";\nimport { connect } from \"react-redux\";\nimport PeerInput from \"./Container/PeerInfo\";\nimport CaInput from \"./Container/CaInfo\";\nimport Submit from \"./Container/Submit\";\nimport Orglist from \"./Container/OrgList\";\nconst mapStateToProps = (state) => ({\n    barVal: state.barvalue,\n});\nfunction App(props) {\n    return (\n        <BrowserRouter>\n            <Progress value={props.barVal} />\n            <Container>\n                <Row style={{ padding: \"2em\" }}>\n                    <Col\n                        lg={{ size: 8, offset: 2 }}\n                        md=\"12\"\n                        style={{ textAlign: \"center\" }}\n                    >\n                        <h1>\n                            <NavLink\n                                to=\"/\"\n                                style={{\n                                    textDecoration: \"none\",\n                                    color: \"black\",\n                                }}\n                            >\n                                Automatic yaml config generator\n                            </NavLink>\n                        </h1>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"12\" lg={{ size: 6, offset: 3 }}>\n                        <Switch>\n                            <Route exact path=\"/\" component={Form} />\n                            <Route\n                                exact\n                                path=\"/orgconfig\"\n                                component={OrgInput}\n                            />\n                            <Route\n                                path=\"/peerconfig/:orgid\"\n                                component={PeerInput}\n                            />\n                            <Route exact path=\"/caconfig\" component={CaInput} />\n                            <Route exact path=\"/submit\" component={Submit} />\n                            <Route exact path=\"/orglist\" component={Orglist} />\n                        </Switch>\n                    </Col>\n                </Row>\n            </Container>\n        </BrowserRouter>\n    );\n}\n\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    UPDATE_ORG_NUM,\n    UPDATE_ORG_INFO,\n    SET_BAR_VAL,\n    UPDATE_PEER_INFO,\n    UPDATE_CA_INFO,\n    FILL_ORG,\n} from \"./action-types\";\nconst initialState = {\n    orgcount: 0,\n    org: [],\n    cacount: 0,\n    ca: [],\n    barvalue: 0,\n    filled_org: [],\n};\nfunction rootReducer(state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_ORG_NUM:\n            return {\n                ...state,\n                orgcount: action.payload,\n                cacount: action.payload,\n                filled_org: Array(parseInt(action.payload)).fill(\n                    false,\n                    0,\n                    action.payload\n                ),\n            };\n        case UPDATE_ORG_INFO:\n            return {\n                ...state,\n                org: action.payload,\n            };\n        case UPDATE_PEER_INFO:\n            var neworgs = JSON.parse(JSON.stringify(state.org));\n            neworgs[action.payload.orgid].peer = action.payload.peer;\n            return { ...state, org: neworgs };\n        case UPDATE_CA_INFO:\n            return { ...state, ca: action.payload };\n        case SET_BAR_VAL:\n            return { ...state, barvalue: action.payload };\n        case FILL_ORG:\n            return {\n                ...state,\n                filled_org: state.filled_org.map((filled, orgid) => {\n                    if (orgid === parseInt(action.payload)) {\n                        return true;\n                    } else {\n                        return filled;\n                    }\n                }),\n            };\n        default:\n            return state;\n    }\n}\nexport default rootReducer;\n//output state to backend\n/*\n{\norgcount\norg[\n    {\n      name,\n      peercount,\n      peer[\n        {\n          name,\n          port\n        },\n      ],\n      orderer{\n        port\n      },\n    }\n  ],\ncacount,\nca[\n    name,\n    port\n  ]\n}\n*/\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}